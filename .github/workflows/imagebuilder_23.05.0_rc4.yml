name: imagebuilder编译23.05.0-rc4
on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'  
  #schedule:
  #- cron: "20  3 * * 1"

env:
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: 删除文件
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"


    - name: 显示系统情况
      run: |
        lscpu
        free -h
        df -Th
        uname -a
        echo "TIME1=$(date "+%Y年%m月%d日%H时%M分")" >> $GITHUB_ENV

    - name: 安装依赖文件
      run: |
        sudo -E apt update -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools

    - name: 下载imagebuilder源码
      run: |
        wget https://downloads.immortalwrt.org/releases/23.05.0-rc4/targets/x86/64/immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64.tar.xz
        tar -J -x -f immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64.tar.xz
        

    - name: 修改配置和编译文件
      run: |
        cd immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64
        sed -i 's/CONFIG_ISO_IMAGES=y/#CONFIG_ISO_IMAGES is not set/' .config
        #sed -i 's/CONFIG_QCOW2_IMAGES=y/#CONFIG_QCOW2_IMAGES is not set/' .config
        sed -i 's/CONFIG_VDI_IMAGES=y/#CONFIG_VDI_IMAGES is not set/' .config
        sed -i 's/CONFIG_VMDK_IMAGES=y/#CONFIG_VDI_IMAGES is not set/' .config
        sed -i 's/CONFIG_VHDX_IMAGES=y/#CONFIG_VHDX_IMAGES is not set/' .config
        #sed -i 's/CONFIG_TARGET_ROOTFS_PARTSIZE=200/CONFIG_TARGET_ROOTFS_PARTSIZE=500/' .config

    - name: 添加非官方包
      run: |
        cd immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64
        wget -P ./packages https://github.com/tty228/luci-app-wechatpush/releases/download/v3.3.2/luci-app-wechatpush_3.3.2_all.ipk
        wget -P ./packages https://github.com/tty228/luci-app-wechatpush/releases/download/v3.3.2/luci-i18n-wechatpush-zh-cn_git-23.169.53184-35dd92c_all.ipk
        

    - name: 编译
      id: compile
      run: |
        cd immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64
        make image PACKAGES="qemu-ga kmod-alx luci-i18n-base-zh-cn luci-i18n-opkg-zh-cn luci-i18n-firewall-zh-cn kmod-tun luci-compat luci-lib-ip htop coremark ca-bundle kmod-sched-core kmod-sched-bpf kmod-xdp-sockets-diag kmod-nf-socket kmod-nf-tproxy kmod-nft-socket kmod-nft-tproxy dae dae-geoip dae-geosite hysteria luci-app-alist luci-app-daed luci-app-ddns-go luci-app-filetransfer luci-app-firewall luci-app-ramfree luci-app-openclash luci-app-ipsec-vpnd luci-app-passwall luci-app-unblockneteasemusic luci-app-ttyd luci-app-wechatpush luci-app-zerotier luci-i18n-alist-zh-cn luci-i18n-daed-zh-cn luci-i18n-ddns-go-zh-cn luci-i18n-filetransfer-zh-cn luci-i18n-ipsec-vpnd-zh-cn luci-i18n-ramfree-zh-cn luci-i18n-passwall-zh-cn luci-i18n-ttyd-zh-cn luci-i18n-wechatpush-zh-cn luci-i18n-zerotier-zh-cn"
        echo "FILE_DATE=_$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 整理文件
      id: organize
      run: |
        cd immortalwrt-imagebuilder-23.05.0-rc4-x86-64.Linux-x86_64/bin/targets/*/*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传firmware文件夹
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: immortalwrt-23.05.0-rc4-x86-64-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: 创建 release 标签
      id: tag
      run: |
        echo "release_tag=immortalwrt-imagebuilder23.05.0-rc4-${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "TIME2=$(date "+%Y年%m月%d日%H时%M分")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传发布release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
