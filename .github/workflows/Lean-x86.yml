name: Lean-x86

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
# REPO_URL: https://github.com/openwrt/openwrt
# REPO_URL: https://github.com/Lienol/openwrt
# REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_URL: https://github.com/coolsnowwolf/lede
# REPO_URL: https://github.com/aakkll/lede
  REPO_BRANCH: master
# REPO_BRANCH: kernel6.1--5.15
# REPO_BRANCH: master --single-branch
# REPO_BRANCH: lede-17.01 --single-branch
# REPO_BRANCH: openwrt-18.06 --single-branch
# REPO_BRANCH: openwrt-19.07 --single-branch
# REPO_BRANCH: openwrt-21.02 --single-branch
# REPO_BRANCH: 21.02 --single-branch
# REPO_BRANCH: 19.07 --single-branch
# REPO_BRANCH: main --single-branch
# REPO_BRANCH: openwrt-18.06-dev --single-branch
# REPO_BRANCH: openwrt-18.06-k5.4 --single-branch
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x86/Lean-x86.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: x86/Lean-x86.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  FILE_NAME: OpenWrt x86

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT    
    
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* aspnetcore*
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt update
        sudo -E apt -y install rename libfuse-dev clang-13 $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        df -Th
    
    - name: Clone Source Code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    
    - name: Load Custom Feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    
    - name: Update Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    
    - name: Output compilation information
      run: |
        cd openwrt
        echo " 系统空间       类型  总数  已用  可用  使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in    
        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}  
        echo
        echo "=========================================="
        echo
        echo
        echo "输出完整插件信息..."
        echo
        echo
        cat .config    
    
    - name: Download Package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile The Firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >>$GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    
    - name: Check space usage
      run: |
        echo "=========================================="
        echo "----------------空间使用-------------------"
        echo "=========================================="
        echo " 系统空间      类型   总数  已用  可用 使用率"
        df -hT
        echo "=========================================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin

#    - name: Upload Bin Directory
#      uses: actions/upload-artifact@main
#      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
#      with:
#        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
#        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        tar -zcvf AllPackages.tar.gz openwrt/bin/packages
        mv AllPackages.tar.gz openwrt/bin/targets/*/*
        cd openwrt/bin/targets/*/*
        tar -zcvf Packages.tar.gz packages
        rm -rf packages config.buildinfo feeds.buildinfo sha256sums version.buildinfo *.manifest Packages.tar.gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >>$GITHUB_OUTPUT
    
    - name: Upload Firmware Directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
